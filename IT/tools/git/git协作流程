通过之前对git原理的了解，可以分析得出使用Git时有以下几种工作流程：
　　1.一个人单干，不需要考虑冲突，随时可以开分支、合并分支和切换分支，随时可以本地提交。如果为了防止代码丢失，可以开一个服务器，每次工作完成就push到服务器上；
　　2.小型团队合作，如前所述，开一个服务器保存代码仓库，然后所有的人把该服务器当成远程仓库，工作之前先fetch，工作之后再push。如果有冲突，则先fetch，合并分支解决冲突后再push。如果团队人数太多，每个人都向该服务器push，那冲突该是有多少？有可能一个开发者第一次向服务器push的时候，有人在他之前已经push过了，他只好先fetch，手工合并解决冲突，可等他再次push的时候，发现又有人再他之前已经push了，于是他只好再做一次解决冲突的流程，可是如果在他工作的时候，又有人push了呢？这也是之前讲的该工作流程只适合小型开发团队的原因。
　　以上流程经过适当修改也可以供大型团队使用，那就是将团队分组，每个组的成员共用一个服务器当远程仓库，组长合并了该组的工作成果后，再push到另一个服务器当总的远程仓库，这样就可以大大减少冲突的数量，减少工作量。
　　3.开源项目的合作，在这种情况下，每个人都把自己的仓库暴露在互联网上。开源项目的组织者或负责人将所有人的仓库设为远程仓库，并把有意义的工作合并到主分支，然后发布官方的Git仓库。每个开发者从官方仓库fetch代码后，完成自己的工作，然后再把它push到互联网上自己的仓库，等着项目负责人将自己的工作整合到官方仓库中。如果项目负责人不干了，改人了，只要还有人继续开发，该项目就可以继续下去。碰到团队比较大的情况，也可以进行分组。
　　服务器的建设也相当简单，因为Git支持以SSH、HTTP等协议传输数据，如果需要对服务器有写权限，就开通SSH服务吧，设一个账户供所有人访问Git仓库即可。如果只需要只读权限，使用任何一个HTTP服务器均可。关于Git服务器的建设，请自行参考官方文档。如果是个人的、开源的项目，可以使用Github网站提供的服务，直接存储在互联网上。（Github私人仓库是要收钱的。）

看来要把Git讲清楚并不容易，用了这么多篇幅。下面把Git常用的命令回顾一下：
　　git config 配置Git，一般使用不需要特别配置，但至少要设置开发者的名字和邮箱
　　git init和git add 创建一个新仓库，并跟踪工作目录下的文件
　　git clone 从远程克隆一个项目，包括工作目录和仓库
　　git add 将修改后的文件放入缓存区域（staging area），或这表示冲突已经解决
　　git status 显示文件状态，是已修改还是已缓存还是已提交
　　git commit 提交项目
　　git remote 管理远程仓库
　　git fetch和git pull 从远程仓库抓取数据
　　git push 向远程仓库推送数据
　　git branch和git merge 创建分支及合并分支
　　git checkout 切换分支

恩，SVN就不说了，操作简单是一个好处，但是也造成了工作的单一。我在很长时间通过svn和git同时管理一个项目repo。是这样的，首先update SVN的项目，然后git init建立git项目，然后忽略.svn文件，并提交整个代码。最后把git仓库提交到局域网公共服务器上。那么SVN和git就完全独立了。SVN用于最终代码搞定的时候提交，平时用git进行合作、分支等等。要注意的是SVN也需要ignore掉.git目录。通常我们不管git和SVN的同步问题。需要小组范围合作，就git建立新的分支，提交（不管之前是什么版本），然后合作，做完了以后找个人（通常是我自己）用SVN将结果提交进SVN服务器。问题就是message得重写了。然后git分支合并入主分支。完成。这样基本上SVN版本和git版本就是一对多的关系。老大要版本，我们给SVN的，但是我们自己小范围用git。老大还笑称我们用git的是”无政府小组织“，嘿嘿。